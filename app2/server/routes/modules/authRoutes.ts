/**
 * ูุณุงุฑุงุช ุงููุตุงุฏูุฉ - ุชุณุฌูู ุงูุฏุฎูู ูุงูุฎุฑูุฌ ูุงูุชุณุฌูู
 * Authentication Routes - Login, Register, Logout
 */

import express from 'express';
import { Request, Response } from 'express';
import { db } from '../../db.js';
import bcrypt from 'bcryptjs';
import { sql } from 'drizzle-orm';
import { generateAccessToken, generateRefreshToken, verifyRefreshToken } from '../../auth/jwt-utils.js';

export const authRouter = express.Router();

/**
 * ๐ ุชุณุฌูู ุงูุฏุฎูู
 * POST /api/auth/login
 */
authRouter.post('/login', async (req: Request, res: Response) => {
  try {
    console.log('๐ [AUTH] ูุญุงููุฉ ุชุณุฌูู ุฏุฎูู:', { email: req.body.email, timestamp: new Date().toISOString() });
    
    const { email, password } = req.body;
    
    if (!email || !password) {
      console.log('โ [AUTH] ุจูุงูุงุช ูุงูุตุฉ - ุงูุจุฑูุฏ ุฃู ูููุฉ ุงููุฑูุฑ ููููุฏุฉ');
      return res.status(400).json({
        success: false,
        message: 'ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ููููุฉ ุงููุฑูุฑ ูุทููุจุงู'
      });
    }

    // ุงูุจุญุซ ุนู ุงููุณุชุฎุฏู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    const userResult = await db.execute(sql`
      SELECT id, email, password, full_name, created_at
      FROM users 
      WHERE email = ${email}
    `);

    if (userResult.rows.length === 0) {
      console.log('โ [AUTH] ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ:', email);
      return res.status(401).json({
        success: false,
        message: 'ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู ุบูุฑ ุตุญูุญุฉ'
      });
    }

    const user = userResult.rows[0] as any;
    
    // ุงูุชุญูู ูู ูููุฉ ุงููุฑูุฑ
    const passwordMatch = await bcrypt.compare(password, String(user.password));
    
    if (!passwordMatch) {
      console.log('โ [AUTH] ูููุฉ ูุฑูุฑ ุฎุงุทุฆุฉ ูููุณุชุฎุฏู:', email);
      return res.status(401).json({
        success: false,
        message: 'ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู ุบูุฑ ุตุญูุญุฉ'
      });
    }

    // ุฅูุดุงุก JWT tokens
    const accessToken = generateAccessToken({
      userId: String(user.id),
      email: String(user.email),
      role: 'user' // ุงูุชุฑุงุถู
    });
    const refreshToken = generateRefreshToken({
      userId: String(user.id),
      email: String(user.email)
    });
    
    console.log('โ [AUTH] ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ:', { 
      userId: user.id, 
      email: user.email,
      fullName: user.full_name
    });

    res.json({
      success: true,
      message: 'ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ',
      data: {
        user: {
          id: user.id,
          email: user.email,
          fullName: user.full_name,
          createdAt: user.created_at
        },
        tokens: {
          accessToken,
          refreshToken
        }
      }
    });

  } catch (error: any) {
    console.error('โ [AUTH] ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู:', error);
    res.status(500).json({
      success: false,
      message: 'ุฎุทุฃ ูู ุงูุฎุงุฏู ุฃุซูุงุก ุชุณุฌูู ุงูุฏุฎูู',
      error: error.message
    });
  }
});

/**
 * ๐ ุชุณุฌูู ุญุณุงุจ ุฌุฏูุฏ
 * POST /api/auth/register
 */
authRouter.post('/register', async (req: Request, res: Response) => {
  try {
    console.log('๐ [AUTH] ูุญุงููุฉ ุชุณุฌูู ุญุณุงุจ ุฌุฏูุฏ:', { email: req.body.email });
    
    const { email, password, fullName } = req.body;
    
    if (!email || !password || !fullName) {
      return res.status(400).json({
        success: false,
        message: 'ุฌููุน ุงูุญููู ูุทููุจุฉ (ุงูุจุฑูุฏุ ูููุฉ ุงููุฑูุฑุ ุงูุงุณู ุงููุงูู)'
      });
    }

    // ุงูุชุญูู ูู ูุฌูุฏ ุงููุณุชุฎุฏู ูุณุจูุงู
    const existingUser = await db.execute(sql`
      SELECT id FROM users WHERE email = ${email}
    `);

    if (existingUser.rows.length > 0) {
      console.log('โ [AUTH] ุงููุณุชุฎุฏู ููุฌูุฏ ูุณุจูุงู:', email);
      return res.status(409).json({
        success: false,
        message: 'ุงููุณุชุฎุฏู ููุฌูุฏ ุจุงููุนู ุจูุฐุง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู'
      });
    }

    // ุชุดููุฑ ูููุฉ ุงููุฑูุฑ
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // ุฅูุดุงุก ุงููุณุชุฎุฏู ุงูุฌุฏูุฏ
    const newUserResult = await db.execute(sql`
      INSERT INTO users (email, password, full_name, created_at)
      VALUES (${email}, ${hashedPassword}, ${fullName}, NOW())
      RETURNING id, email, full_name, created_at
    `);

    const newUser = newUserResult.rows[0] as any;

    console.log('โ [AUTH] ุชู ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ:', { 
      userId: newUser.id, 
      email: newUser.email,
      fullName: newUser.full_name
    });

    res.status(201).json({
      success: true,
      message: 'ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ',
      data: {
        user: {
          id: newUser.id,
          email: newUser.email,
          fullName: newUser.full_name,
          createdAt: newUser.created_at
        }
      }
    });

  } catch (error: any) {
    console.error('โ [AUTH] ุฎุทุฃ ูู ุชุณุฌูู ุญุณุงุจ ุฌุฏูุฏ:', error);
    res.status(500).json({
      success: false,
      message: 'ุฎุทุฃ ูู ุงูุฎุงุฏู ุฃุซูุงุก ุฅูุดุงุก ุงูุญุณุงุจ',
      error: error.message
    });
  }
});

/**
 * ๐ช ุชุณุฌูู ุงูุฎุฑูุฌ
 * POST /api/auth/logout
 */
authRouter.post('/logout', async (req: Request, res: Response) => {
  try {
    console.log('๐ช [AUTH] ุชุณุฌูู ุฎุฑูุฌ ุงููุณุชุฎุฏู');
    
    // ูู ุงููุณุชูุจู ูููู ุฅุถุงูุฉ blacklist ููู tokens
    // ุฃู ุฅูุบุงุก refresh token ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
    
    res.json({
      success: true,
      message: 'ุชู ุชุณุฌูู ุงูุฎุฑูุฌ ุจูุฌุงุญ'
    });

  } catch (error: any) {
    console.error('โ [AUTH] ุฎุทุฃ ูู ุชุณุฌูู ุงูุฎุฑูุฌ:', error);
    res.status(500).json({
      success: false,
      message: 'ุฎุทุฃ ูู ุชุณุฌูู ุงูุฎุฑูุฌ',
      error: error.message
    });
  }
});

/**
 * ๐ ุชุฌุฏูุฏ Access Token
 * POST /api/auth/refresh
 */
authRouter.post('/refresh', async (req: Request, res: Response) => {
  try {
    console.log('๐ [AUTH] ุทูุจ ุชุฌุฏูุฏ Access Token');
    
    const { refreshToken } = req.body;
    
    if (!refreshToken) {
      return res.status(401).json({
        success: false,
        message: 'Refresh token ูุทููุจ'
      });
    }

    // ุงูุชุญูู ูู ุตุญุฉ refresh token
    try {
      const decoded = verifyRefreshToken(refreshToken) as any;
      
      if (!decoded) {
        console.log('โ [AUTH] Refresh token ุบูุฑ ุตุงูุญ');
        return res.status(401).json({
          success: false,
          message: 'Refresh token ุบูุฑ ุตุงูุญ'
        });
      }

      // ุงูุจุญุซ ุนู ุงููุณุชุฎุฏู ูุฑุฉ ุฃุฎุฑู ููุชุฃูุฏ
      const userResult = await db.execute(sql`
        SELECT id, email, full_name, created_at
        FROM users 
        WHERE id = ${decoded.userId || decoded.id}
      `);

      if (userResult.rows.length === 0) {
        return res.status(401).json({
          success: false,
          message: 'ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ'
        });
      }

      const user = userResult.rows[0] as any;
      
      // ุฅูุดุงุก access token ุฌุฏูุฏ
      const newAccessToken = generateAccessToken({
        userId: String(user.id),
        email: String(user.email),
        role: 'user'
      });
    
      console.log('โ [AUTH] ุชู ุชุฌุฏูุฏ Access Token ุจูุฌุงุญ:', { userId: user.id });

      res.json({
        success: true,
        message: 'ุชู ุชุฌุฏูุฏ Access Token ุจูุฌุงุญ',
        data: {
          accessToken: newAccessToken
        }
      });

    } catch (tokenError: any) {
      console.log('โ [AUTH] Refresh token ุบูุฑ ุตุงูุญ:', tokenError.message);
      return res.status(401).json({
        success: false,
        message: 'Refresh token ุบูุฑ ุตุงูุญ ุฃู ููุชูู ุงูุตูุงุญูุฉ'
      });
    }

  } catch (error: any) {
    console.error('โ [AUTH] ุฎุทุฃ ูู ุชุฌุฏูุฏ Token:', error);
    res.status(401).json({
      success: false,
      message: 'ุฎุทุฃ ูู ุชุฌุฏูุฏ Access Token',
      error: error.message
    });
  }
});

/**
 * ๐ค ูุนูููุงุช ุงููุณุชุฎุฏู ุงูุญุงูู
 * GET /api/auth/me
 */
authRouter.get('/me', async (req: Request, res: Response) => {
  try {
    console.log('๐ค [AUTH] ุทูุจ ูุนูููุงุช ุงููุณุชุฎุฏู ุงูุญุงูู');
    
    // ุณูุชู ุฅุถุงูุฉ middleware ููุชุญูู ูู ุงููุตุงุฏูุฉ ููุง ูุงุญูุงู
    res.json({
      success: true,
      message: 'ูุนูููุงุช ุงููุณุชุฎุฏู - ุณูุชู ุชุทุจูู ุงูููุทู ุงููุงูู',
      data: {
        user: null
      }
    });

  } catch (error: any) {
    console.error('โ [AUTH] ุฎุทุฃ ูู ุฌูุจ ูุนูููุงุช ุงููุณุชุฎุฏู:', error);
    res.status(500).json({
      success: false,
      message: 'ุฎุทุฃ ูู ุฌูุจ ูุนูููุงุช ุงููุณุชุฎุฏู',
      error: error.message
    });
  }
});

console.log('๐ [AuthRouter] ุชู ุชููุฆุฉ ูุณุงุฑุงุช ุงููุตุงุฏูุฉ');

export default authRouter;