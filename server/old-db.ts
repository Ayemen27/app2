
import { Pool, Client } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import fs from 'fs';

// ุฅูุดุงุก ุฑุงุจุท ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ (Supabase) ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
function createOldDatabaseUrl(): string {
  if (process.env.OLD_DB_URL) {
    console.log('โ ุงุณุชุฎุฏุงู OLD_DB_URL ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ');
    const finalUrl = process.env.OLD_DB_URL;
    console.log('๐ง Old DB Connection string:', finalUrl.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'));
    return finalUrl;
  }
  
  console.error('โ OLD_DB_URL ุบูุฑ ููุฌูุฏ ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ');
  throw new Error('OLD_DB_URL is required for data migration');
}

// ุฅุนุฏุงุฏ SSL ููุงุชุตุงู ุจู Supabase
function setupOldDBSSLConfig() {
  const connectionString = createOldDatabaseUrl();
  
  // Supabase ูุชุทูุจ SSL ุฏุงุฆูุงู
  console.log('๐ ุชูุนูู SSL ููุงุชุตุงู ุจู Supabase');
  
  // ููุงุชุตุงู ุจู Supabase - ุงุณุชุฎุฏุงู SSL ูุน ุชุฌุงูู ูุดุงูู ุงูุดูุงุฏุงุช ููุชุจุณูุท
  return {
    rejectUnauthorized: false, // ุชุฌุงูู ูุดุงูู ุงูุดูุงุฏุงุช
    minVersion: 'TLSv1.2' as const
  };
}

const oldConnectionString = createOldDatabaseUrl();
const oldSSLConfig = setupOldDBSSLConfig();

// ุชูุธูู connection string ูู ูุนุงููุงุช SSL ุงููุชุถุงุฑุจุฉ
const cleanOldConnectionString = oldConnectionString.replace(/[?&]sslmode=[^&]*/g, '').replace(/[?&]ssl=[^&]*/g, '');

// ุฅูุดุงุก Pool ููุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ
export const oldPool = new Pool({ 
  connectionString: cleanOldConnectionString,
  ssl: oldSSLConfig,
  // ุฅุนุฏุงุฏุงุช ูุญุณููุฉ ููุงุชุตุงู ุจู Supabase
  max: 5, // ุนุฏุฏ ุฃูู ูู ุงูุงุชุตุงูุงุช ููุงุณุชุฎุฏุงู ุงููุคูุช
  idleTimeoutMillis: 20000,
  connectionTimeoutMillis: 15000,
  keepAlive: true,
  statement_timeout: 30000,
  query_timeout: 30000
});

// ุฅูุดุงุก Drizzle instance ูููุงุนุฏุฉ ุงููุฏููุฉ (ุจุฏูู schema ูุฃููุง ููุฑุฃ ููุท)
export const oldDb = drizzle(oldPool);

// ุฏุงูุฉ ููุญุตูู ุนูู client ูุจุงุดุฑ ููุงุณุชุนูุงูุงุช ุงููุฎุตุตุฉ
export const getOldDbClient = async (): Promise<Client> => {
  const client = new Client({
    connectionString: cleanOldConnectionString,
    ssl: oldSSLConfig,
    connectionTimeoutMillis: 15000,
    statement_timeout: 30000,
    query_timeout: 30000
  });
  
  await client.connect();
  return client;
};

// ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ ุนูุฏ ุชุญููู ุงูููุฏููู
(async () => {
  try {
    const client = await oldPool.connect();
    const res = await client.query('SELECT version(), current_database(), current_user');
    console.log('โ ูุฌุญ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ (Supabase)');
    console.log('๐ ุฅุตุฏุงุฑ PostgreSQL (Supabase):', res.rows[0].version?.split(' ')[0] || 'ุบูุฑ ูุนุฑูู');
    console.log('๐๏ธ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ:', res.rows[0].current_database);
    console.log('๐ค ุงููุณุชุฎุฏู (Supabase):', res.rows[0].current_user);
    client.release();
  } catch (err) {
    console.error('โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ (Supabase):', err);
    console.error('๐ก ุชุฃูุฏ ูู ุตุญุฉ OLD_DB_URL ูู ููู .env');
  }
})();

// ุฏุงูุฉ ูุฅุบูุงู ุฌููุน ุงูุงุชุตุงูุงุช ุนูุฏ ุฅููุงุก ุงูุชุทุจูู
export const closeOldDbConnections = async () => {
  try {
    await oldPool.end();
    console.log('โ ุชู ุฅุบูุงู ุฌููุน ุงูุงุชุตุงูุงุช ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ');
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุบูุงู ุงุชุตุงูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ:', error);
  }
};

// ุชูุธูู ุงูุงุชุตุงูุงุช ุนูุฏ ุฅููุงุก ุงูุนูููุฉ
process.on('exit', closeOldDbConnections);
process.on('SIGINT', closeOldDbConnections);
process.on('SIGTERM', closeOldDbConnections);
