
import { Pool, Client } from 'pg';
import { drizzle } from 'drizzle-orm/node-postgres';
import fs from 'fs';

// ุฅูุดุงุก ุฑุงุจุท ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ (Supabase) ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
function createOldDatabaseUrl(): string {
  if (process.env.OLD_DB_URL) {
    console.log('โ ุงุณุชุฎุฏุงู OLD_DB_URL ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ');
    const finalUrl = process.env.OLD_DB_URL;
    console.log('๐ง Old DB Connection string:', finalUrl.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'));
    return finalUrl;
  }
  
  console.error('โ OLD_DB_URL ุบูุฑ ููุฌูุฏ ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ');
  throw new Error('OLD_DB_URL is required for data migration');
}

// ุฅุนุฏุงุฏ SSL ุงููุญุณู ููุงุชุตุงู ุจู Supabase
function setupOldDBSSLConfig() {
  // Supabase ูุชุทูุจ SSL ุฏุงุฆูุงู ูุน ุฅุนุฏุงุฏุงุช ูุฑูุฉ ูุชุฌูุจ ูุดุงูู ุงูุงุชุตุงู
  console.log('๐ ุชูุนูู SSL ุงููุญุณู ููุงุชุตุงู ุจู Supabase');
  
  return {
    rejectUnauthorized: false, // ุงุณุชุฎุฏุงู SSL ูุฑู ูุชุฌูุจ ูุดุงูู ุงูุดูุงุฏุงุช
    ca: undefined, 
    servername: undefined, 
    minVersion: 'TLSv1.2' as const,
    maxVersion: 'TLSv1.3' as const,
    ciphers: undefined // ุงุณุชุฎุฏุงู ุฅุนุฏุงุฏุงุช ุงูุชุฑุงุถูุฉ
  };
}

const oldConnectionString = createOldDatabaseUrl();
const oldSSLConfig = setupOldDBSSLConfig();

// ุชูุธูู connection string ูู ูุนุงููุงุช SSL ุงููุชุถุงุฑุจุฉ
const cleanOldConnectionString = oldConnectionString.replace(/[?&]sslmode=[^&]*/g, '').replace(/[?&]ssl=[^&]*/g, '');

// ุฅูุดุงุก Pool ูุญุณู ููุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ
export const oldPool = new Pool({ 
  connectionString: cleanOldConnectionString,
  ssl: oldSSLConfig,
  // ุฅุนุฏุงุฏุงุช ูุญุณููุฉ ููุงุชุตุงูุงุช ุงูุฎุงุฑุฌูุฉ ูุน Supabase
  max: 3, // ุนุฏุฏ ุฃูู ููุงุณุชุฎุฏุงู ุงููุคูุช
  min: 1, // ุงุชุตุงู ูุงุญุฏ ุนูู ุงูุฃูู ุฌุงูุฒ
  idleTimeoutMillis: 60000, // ุฒูุงุฏุฉ idle timeout
  connectionTimeoutMillis: 60000, // ุฒูุงุฏุฉ connection timeout ููุงุชุตุงูุงุช ุงูุฎุงุฑุฌูุฉ
  acquireTimeoutMillis: 120000, // ููุช ุงูุชุธุงุฑ ููุญุตูู ุนูู ุงุชุตุงู
  createTimeoutMillis: 60000, // ููุช ุฅูุดุงุก ุงุชุตุงู ุฌุฏูุฏ
  destroyTimeoutMillis: 5000, // ููุช ุฅุบูุงู ุงูุงุชุตุงู
  reapIntervalMillis: 1000, // ูุญุต ุงูุงุชุตุงูุงุช ูู ุซุงููุฉ
  createRetryIntervalMillis: 2000, // ุฅุนุงุฏุฉ ุงููุญุงููุฉ ูู ุซุงููุชูู
  keepAlive: true,
  keepAliveInitialDelayMillis: 10000,
  statement_timeout: 120000, // ุฒูุงุฏุฉ statement timeout ููุงุณุชุนูุงูุงุช ุงูุทูููุฉ
  query_timeout: 120000, // ุฒูุงุฏุฉ query timeout
  application_name: 'migration_tool_v2' // ุชุญุฏูุฏ ุงุณู ุงูุชุทุจูู
});

// ุฅูุดุงุก Drizzle instance ูููุงุนุฏุฉ ุงููุฏููุฉ (ุจุฏูู schema ูุฃููุง ููุฑุฃ ููุท)
export const oldDb = drizzle(oldPool);

// ุฏุงูุฉ ูุญุณูุฉ ููุญุตูู ุนูู client ูุน retry logic
export const getOldDbClient = async (retries = 3): Promise<Client> => {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`๐ ูุญุงููุฉ ุงูุงุชุตุงู ${attempt}/${retries} ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ...`);
      
      const client = new Client({
        connectionString: cleanOldConnectionString,
        ssl: oldSSLConfig,
        connectionTimeoutMillis: 60000, // ุฒูุงุฏุฉ timeout
        statement_timeout: 120000, // ุฒูุงุฏุฉ statement timeout
        query_timeout: 120000, // ุฒูุงุฏุฉ query timeout
        application_name: 'migration_client_v2'
      });
      
      await client.connect();
      console.log(`โ ูุฌุญ ุงูุงุชุตุงู ูู ุงููุญุงููุฉ ${attempt}`);
      return client;
      
    } catch (error) {
      console.error(`โ ูุดูุช ุงููุญุงููุฉ ${attempt}:`, error.message);
      
      if (attempt === retries) {
        throw new Error(`ูุดู ุงูุงุชุตุงู ุจุนุฏ ${retries} ูุญุงููุงุช: ${error.message}`);
      }
      
      // ุงูุชุธุงุฑ ูุชุฒุงูุฏ ุจูู ุงููุญุงููุงุช (exponential backoff)
      const waitTime = Math.min(1000 * Math.pow(2, attempt - 1), 10000);
      console.log(`โณ ุงูุชุธุงุฑ ${waitTime}ms ูุจู ุงููุญุงููุฉ ุงูุชุงููุฉ...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
  }
  
  throw new Error('ูุดู ูู ุฌููุน ูุญุงููุงุช ุงูุงุชุตุงู');
};

// ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุงููุญุณู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ ูุน retry logic
(async () => {
  let retryCount = 0;
  const maxRetries = 3;
  
  while (retryCount < maxRetries) {
    try {
      console.log(`๐ ูุญุงููุฉ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ${retryCount + 1}/${maxRetries}...`);
      
      const client = await oldPool.connect();
      const res = await client.query('SELECT version(), current_database(), current_user, inet_server_addr(), inet_server_port()');
      
      console.log('โ ูุฌุญ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ (Supabase)');
      console.log('๐ ุฅุตุฏุงุฑ PostgreSQL (Supabase):', res.rows[0].version?.split(' ')[0] || 'ุบูุฑ ูุนุฑูู');
      console.log('๐๏ธ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ:', res.rows[0].current_database);
      console.log('๐ค ุงููุณุชุฎุฏู (Supabase):', res.rows[0].current_user);
      console.log('๐ ุนููุงู ุงูุฎุงุฏู:', res.rows[0].inet_server_addr || 'ุบูุฑ ูุชุงุญ');
      console.log('๐ ูููุฐ ุงูุฎุงุฏู:', res.rows[0].inet_server_port || 'ุบูุฑ ูุชุงุญ');
      
      // ุงุฎุชุจุงุฑ ุฅุถุงูู ูููุงุณ ุณุฑุนุฉ ุงูุงุณุชุฌุงุจุฉ
      const startTime = Date.now();
      await client.query('SELECT 1 as test');
      const responseTime = Date.now() - startTime;
      console.log(`โก ุฒูู ุงูุงุณุชุฌุงุจุฉ: ${responseTime}ms`);
      
      client.release();
      break; // ูุฌุญ ุงูุงุชุตุงูุ ุงุฎุฑุฌ ูู ุงูุญููุฉ
      
    } catch (err) {
      retryCount++;
      console.error(`โ ูุดู ุงูุงุชุตุงู (ุงููุญุงููุฉ ${retryCount}):`, err.message);
      
      if (retryCount >= maxRetries) {
        console.error('๐จ ูุดู ูู ุฌููุน ูุญุงููุงุช ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ');
        console.error('๐ก ุชุญูู ูู:');
        console.error('  - ุตุญุฉ OLD_DB_URL ูู ููู .env');
        console.error('  - ุงูุงุชุตุงู ุจุงูุฅูุชุฑูุช');
        console.error('  - ุฅุนุฏุงุฏุงุช SSL ูFirewall');
        console.error('  - ุญุงูุฉ ุฎุงุฏู Supabase');
      } else {
        // ุงูุชุธุงุฑ ูุจู ุงููุญุงููุฉ ุงูุชุงููุฉ
        const waitTime = Math.min(2000 * retryCount, 10000);
        console.log(`โณ ุงูุชุธุงุฑ ${waitTime}ms ูุจู ุงููุญุงููุฉ ุงูุชุงููุฉ...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }
    }
  }
})();

// ุฏุงูุฉ ูุฅุบูุงู ุฌููุน ุงูุงุชุตุงูุงุช ุนูุฏ ุฅููุงุก ุงูุชุทุจูู
export const closeOldDbConnections = async () => {
  try {
    await oldPool.end();
    console.log('โ ุชู ุฅุบูุงู ุฌููุน ุงูุงุชุตุงูุงุช ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ');
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุบูุงู ุงุชุตุงูุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงููุฏููุฉ:', error);
  }
};

// ุชูุธูู ุงูุงุชุตุงูุงุช ุนูุฏ ุฅููุงุก ุงูุนูููุฉ
process.on('exit', closeOldDbConnections);
process.on('SIGINT', closeOldDbConnections);
process.on('SIGTERM', closeOldDbConnections);
