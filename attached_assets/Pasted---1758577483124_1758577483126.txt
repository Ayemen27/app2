أفهم ياحمار هذا تقرير من نسخة احتياطية تعمل

بتحليل منطق حساب إجمالي المصروفات في صفحة المصروفات اليومية بشكل مفصل مع الأدلة من الكود.

تقرير تحليل منطق حساب إجمالي المصروفات اليومية

1. الصفحة الرئيسية للحسابات
الملف الأساسي: client/src/pages/daily-expenses.tsx



في هذا الملف، يتم حساب الإجماليات من خلال دالة calculateTotals() التي تُستدعى في useMemo:

const calculateTotals = () => {
try {
// إنشاء متغيرات آمنة لجميع البيانات مع تسجيل للتشخيص
const safeAttendance = Array.isArray(todayAttendance) ? todayAttendance : [];
const safeTransportation = Array.isArray(todayTransportation) ? todayTransportation : [];
const safeMaterialPurchases = Array.isArray(todayMaterialPurchases) ? todayMaterialPurchases : [];
const safeWorkerTransfers = Array.isArray(todayWorkerTransfers) ? todayWorkerTransfers : [];
const safeMiscExpenses = Array.isArray(todayMiscExpenses) ? todayMiscExpenses : [];
const safeFundTransfers = Array.isArray(todayFundTransfers) ? todayFundTransfers : [];
const safeProjectTransfers = Array.isArray(projectTransfers) ? projectTransfers : [];
2. حساب كل فئة من المصروفات
أ) أجور العمال:
const totalWorkerWages = safeAttendance.reduce(
(sum, attendance) => {
const amount = parseFloat(attendance.paidAmount || "0");
return sum + (isNaN(amount) ? 0 : amount);
},
0
);
ب) مصاريف النقل:
const totalTransportation = safeTransportation.reduce(
(sum, expense) => {
const amount = parseFloat(expense.amount || "0");
return sum + (isNaN(amount) ? 0 : amount);
},
0
);
ج) تكاليف المواد (النقدية فقط):
// حساب المشتريات النقدية فقط - استخدام البيانات الآمنة
const totalMaterialCosts = safeMaterialPurchases
.filter(purchase => purchase.purchaseType === "نقد")
.reduce((sum, purchase) => {
const amount = parseFloat(purchase.totalAmount || "0");
return sum + (isNaN(amount) ? 0 : amount);
}, 0);
د) تحويلات العمال:
const totalWorkerTransfers = safeWorkerTransfers.reduce(
(sum, transfer) => {
const amount = parseFloat(transfer.amount || "0");
return sum + (isNaN(amount) ? 0 : amount);
}, 0);
هـ) المصاريف المتنوعة:
const totalMiscExpenses = safeMiscExpenses.reduce(
(sum, expense) => {
const amount = parseFloat(expense.amount || "0");
return sum + (isNaN(amount) ? 0 : amount);
}, 0);
و) تحويلات الأموال:
const totalFundTransfers = safeFundTransfers.reduce(
(sum, transfer) => {
const amount = parseFloat(transfer.amount || "0");
return sum + (isNaN(amount) ? 0 : amount);
}, 0);
3. حساب ترحيل الأموال بين المشاريع
// حساب الأموال الواردة والصادرة من ترحيل المشاريع
const incomingProjectTransfers = safeProjectTransfers
.filter(transfer => transfer.toProjectId === selectedProjectId)
.reduce((sum, transfer) => {
const amount = parseFloat(transfer.amount || "0");
return sum + (isNaN(amount) ? 0 : amount);
}, 0);
const outgoingProjectTransfers = safeProjectTransfers
.filter(transfer => transfer.fromProjectId === selectedProjectId)
.reduce((sum, transfer) => {
const amount = parseFloat(transfer.amount || "0");
return sum + (isNaN(amount) ? 0 : amount);
}, 0);
4. الحسابات النهائية
const carriedAmount = parseFloat(carriedForward) || 0;
const totalIncome = carriedAmount + totalFundTransfers + incomingProjectTransfers;
const totalExpenses = totalWorkerWages + totalTransportation + totalMaterialCosts +
totalWorkerTransfers + totalMiscExpenses + outgoingProjectTransfers;
const remainingBalance = totalIncome - totalExpenses;
5. مكون ملخص المصروفات
الملف: client/src/components/expense-summary.tsx

export default function ExpenseSummary({ totalIncome, totalExpenses, remainingBalance }: ExpenseSummaryProps) {
// معالجة آمنة للقيم - تحويل إلى أرقام والتعامل مع القيم المفقودة
const safeIncome = typeof totalIncome === 'number' ? totalIncome : parseFloat(String(totalIncome || '0')) || 0;
const safeExpenses = typeof totalExpenses === 'number' ? totalExpenses : parseFloat(String(totalExpenses || '0')) || 0;
const safeBalance = typeof remainingBalance === 'number' ? remainingBalance : parseFloat(String(remainingBalance || '0')) || 0;
6. استدعاء الحسابات في useMemo
// حساب المجاميع مع معالجة آمنة للأخطاء
const totals = useMemo(() => {
try {
const result = calculateTotals();
if (!result || typeof result !== 'object') {
console.warn('⚠️ [DailyExpenses] calculateTotals returned invalid result:', result);
throw new Error('Invalid result from calculateTotals');
}
return result;
} catch (error) {
console.error('❌ [DailyExpenses] خطأ في حساب المجاميع:', error);
return {
totalWorkerWages: 0,
totalTransportation: 0,
totalMaterialCosts: 0,
totalWorkerTransfers: 0,
totalMiscExpenses: 0,
totalFundTransfers: 0,
incomingProjectTransfers: 0,
outgoingProjectTransfers: 0,
totalIncome: 0,
totalExpenses: 0,
remainingBalance: 0,
};
}
}, [
todayAttendance,
todayTransportation,
todayMaterialPurchases,
todayWorkerTransfers,
todayMiscExpenses,
todayFundTransfers,
projectTransfers,
carriedForward,
selectedProjectId
]);
7. تقارير المصروفات اليومية
الملف: client/src/reports/templates/daily-expense-template.tsx

في قالب التقرير، يتم حساب إجماليات كل فئة:

// حساب إجمالي كل فئة
const calculateCategoryTotal = (items: any[], amountField = 'amount') => {
return items?.reduce((sum, item) => sum + (Number(item[amountField]) || 0), 0) || 0;
};
const workerWagesTotal = calculateCategoryTotal(data.workerAttendance, 'paidAmount');
const materialPurchasesTotal = calculateCategoryTotal(data.materialPurchases, 'totalAmount');
const transportationTotal = calculateCategoryTotal(data.transportationExpenses);
const workerTransfersTotal = calculateCategoryTotal(data.workerTransfers);
const miscExpensesTotal = calculateCategoryTotal(data.miscExpenses);
const fundTransfersTotal = calculateCategoryTotal(data.fundTransfers);
8. منطق الحفظ في الخادم
الملف: server/routes.ts - في endpoint التقرير اليومي:

app.get("/api/reports/daily-expenses/:projectId/:date", async (req, res) => {
try {
const { projectId, date } = req.params;

// جلب جميع البيانات  
const [  
  project,  
  fundTransfers,  
  workerAttendance,  
  materialPurchases,  
  transportationExpenses,  
  workerTransfers,  
  miscExpenses,  
  // ... باقي البيانات  
] = await Promise.all([  
  storage.getProject(projectId),  
  storage.getFundTransfersByProjectAndDate(projectId, date),  
  storage.getWorkerAttendanceByProjectAndDate(projectId, date),  
  // ... باقي الاستعلامات  
]);  
// حساب الإجماليات  
const totalFundTransfers = fundTransfers.reduce((sum, t) => sum + parseFloat(t.amount), 0);  
const totalWorkerWages = workerAttendance.reduce((sum, a) => sum + parseFloat(a.paidAmount || '0'), 0);  
// ... باقي الحسابات

9. نقاط مهمة في المنطق
المعالجة الآمنة للبيانات: يتم التحقق من أن البيانات مصفوفات قبل المعالجة
فلترة المشتريات: فقط المشتريات النقدية تؤثر على الرصيد (ليس الآجلة)
ترحيل المشاريع: يتم حساب الأموال الواردة والصادرة منفصلة
معالجة الأخطاء: يتم إرجاع قيم افتراضية في حالة الخطأ
التحقق من الأرقام: استخدام parseFloat مع فحص isNaN


10. الخلاصة
المنطق يتبع هذه المعادلة:



إجمالي الدخل = المبلغ المرحل + تحويلات العهدة + الأموال الواردة من مشاريع أخرى
إجمالي المصروفات = أجور العمال + النقل + المواد النقدية + تحويلات العمال + المصاريف المتنوعة + الأموال الصادرة لمشاريع أخرى
الرصيد المتبقي = إجمالي الدخل - إجمالي المصروفات
هذا النظام يضمن دقة الحسابات مع معالجة جميع الحالات الاستثنائية والبيانات المفقودة.

ايوه والمرحل من سابق اين موقغ من هذا كله

VA

vakeso5048
Assistant
2 minutes ago
بناءً على تحليل الكود المتاح، المبلغ "المرحل من سابق" (carriedForward) موجود في عدة مواقع في النظام:

1. في صفحة المصروفات اليومية (daily-expenses.tsx)
المبلغ المرحل يُعرض في:



حقل إدخال "المبلغ المتبقي السابق"
يُحسب في دالة calculateTotals() كجزء من إجمالي الدخل
2. في مكون ملخص المصاريف (expense-summary.tsx)
يظهر ضمن الملخص المالي اليومي

3. في تقرير المصروفات اليومية (daily-expense-template.tsx)
يُعرض في معلومات الرأس والملخص السريع


4. في تصدير Excel (daily-expenses-bulk-export.tsx)
هنا نجد التفاصيل المهمة:



client/src/components/daily-expenses-bulk-export.tsx
تحسين عرض المبلغ المرحل في Excel
5. في قاعدة البيانات
المبلغ المرحل يُحفظ في جدول daily_expense_summaries في عمود carried_forward_amount

6. في حسابات النظام
في ملف routes.ts توجد دالة لجلب الرصيد من اليوم السابق:



app.get("/api/projects/:projectId/previous-balance/:date", async (req, res) => {
try {
const balance = await storage.getPreviousDayBalance(req.params.projectId, req.params.date);
res.json({ balance });
} catch (error) {
res.status(500).json({ message: "Error fetching previous day balance" });
}
});
الخلاصة: المبلغ المرحل من سابق يظهر في:

أول صف في تقارير Excel
في واجهة إدخال المصروفات اليومية
في ملخص المصروفات
في التقارير المطبوعة
يُحسب تلقائياً من رصيد اليوم السابق
كيف يتم حساب منطة المبلغ المرحل من سابق في صفحة المصروفات اليومية

VA

vakeso5048
Assistant
just now
بناءً على تحليل الكود المتاح، سأوضح لك كيف يتم حساب المبلغ المرحل من سابق في صفحة المصروفات اليومية:

كيفية حساب المبلغ المرحل من سابق

1. الجلب من قاعدة البيانات
في ملف daily-expenses.tsx، يتم جلب الرصيد المتبقي من اليوم السابق:



// جلب الرصيد المتبقي من اليوم السابق
const { data: previousBalance } = useQuery({
queryKey: ["/api/projects", selectedProjectId, "previous-balance", selectedDate],
queryFn: async () => {
try {
const response = await apiRequest(/api/projects/${selectedProjectId}/previous-balance/${selectedDate}, "GET");
if (response && response.data && response.data.balance !== undefined) {
return response.data.balance || "0";
}
return response?.balance || "0";
} catch (error) {
console.error("Error fetching previous balance:", error);
return "0";
}
},
enabled: !!selectedProjectId && !!selectedDate,
});
2. التحديث التلقائي
عند جلب الرصيد السابق، يتم تحديث حقل "المبلغ المتبقي السابق" تلقائياً:

// تحديث المبلغ المرحل تلقائياً عند جلب الرصيد السابق
useEffect(() => {
if (previousBalance) {
setCarriedForward(previousBalance);
}
}, [previousBalance]);
3. الحساب في الخادم
في ملف routes.ts، توجد نقطة نهاية لجلب الرصيد من اليوم السابق:

app.get("/api/projects/:projectId/previous-balance/:date", async (req, res) => {
try {
const balance = await storage.getPreviousDayBalance(req.params.projectId, req.params.date);
res.json({ balance });
} catch (error) {
res.status(500).json({ message: "Error fetching previous day balance" });
}
});
4. العرض في التقرير
في ملف daily-expenses-bulk-export.tsx، يتم عرض المبلغ المرحل في التقرير:

// صف المبلغ المرحل من سابق - يظهر دائماً في أول صف بعد العناوين
// حساب التاريخ السابق للمرحل منه
const yesterdayDate = new Date(dayData.date);
yesterdayDate.setDate(yesterdayDate.getDate() - 1);
const formattedYesterday = formatDate(yesterdayDate.toISOString().split('T')[0]);
// إضافة الرصيد المرحل للرصيد الجاري
currentBalance = parseFloat(dayData.carriedForward?.toString() || '0');
// عرض صف المرحل من سابق (حتى لو كان صفر)
const carryForwardRow = worksheet.addRow([
formatNumber(dayData.carriedForward || 0), // المبلغ المرحل
'رصيد مرحل', // نوع الحساب
'ترحيل من سابق', // النوع
formatNumber(currentBalance), // الرصيد الحالي
مرحل من تاريخ ${formattedYesterday} // الملاحظات
]);
5. الحساب في ملخص اليوم
في دالة calculateTotals() بملف daily-expenses.tsx:

const carriedAmount = parseFloat(carriedForward) || 0;
const totalIncome = carriedAmount + totalFundTransfers + incomingProjectTransfers;
const remainingBalance = totalIncome - totalExpenses;
الخلاصة
المبلغ المرحل من سابق يُحسب كالتالي:

المصدر: الرصيد المتبقي من اليوم السابق في جدول daily_expense_summaries
الحساب: remainingBalance من التاريخ السابق يصبح carriedForward لليوم الحالي
التحديث: يتم تحديثه تلقائياً عند اختيار التاريخ
الاستخدام: يُضاف إلى إجمالي الدخل في حسابات اليوم الحالي
هذا النظام يضمن التسلسل الصحيح للأرصدة عبر الأيام ويمنع فقدان أي أموال في الحسابات.

Scr

