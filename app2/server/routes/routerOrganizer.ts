/**
 * ŸÖŸÜÿ∏ŸÖ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä - Ÿäÿ¨ŸÖÿπ ÿ®ŸäŸÜ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≠ÿßŸÑŸä ŸàÿßŸÑŸÄ routers ÿßŸÑÿ¨ÿØŸäÿØÿ©
 * ŸäŸàŸÅÿ± ÿ∑ÿ®ŸÇÿ© ÿ™ŸÜÿ∏ŸäŸÖŸäÿ© ÿ•ÿ∂ÿßŸÅŸäÿ© ŸÖÿπ ÿ•ÿ®ŸÇÿßÿ° ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≠ÿßŸÑŸä ÿ≥ŸÑŸäŸÖÿßŸã
 */

import type { Express } from "express";
import { publicRouter } from './publicRouter.js';
import { privateRouter } from './privateRouter.js';
import { routeManager, publicRouteRateLimit } from '../config/routes.js';
import { registerOrganizedRoutes, getOrganizedRoutesInfo } from './modules/index.js';

/**
 * ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÜÿ∏ŸäŸÖŸä ŸÑŸÑŸÖÿ≥ÿßÿ±ÿßÿ™
 * ŸäÿπŸÖŸÑ ÿ®ÿ¨ÿßŸÜÿ® ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ≠ÿßŸÑŸä ŸÑÿ•ÿ∂ÿßŸÅÿ© ÿ∑ÿ®ŸÇÿ© ÿ™ŸÜÿ∏ŸäŸÖ
 */
export function initializeRouteOrganizer(app: Express) {
  console.log('üèóÔ∏è [RouterOrganizer] ÿ®ÿØÿ° ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÜÿ∏ŸäŸÖŸä ŸÑŸÑŸÖÿ≥ÿßÿ±ÿßÿ™...');

  // ===== ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖŸÜÿ∏ŸÖ ÿßŸÑÿ¨ÿØŸäÿØ =====
  console.log('üìÇ [RouterOrganizer] ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑŸÖŸÜÿ∏ŸÖÿ©...');
  registerOrganizedRoutes(app);

  // ===== ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÜÿ∏ÿßŸÖ ŸàÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ =====
  
  // ÿ•ÿ∂ÿßŸÅÿ© endpoint ŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™
  app.get('/api/system/route-stats', publicRouteRateLimit, (req, res) => {
    const stats = routeManager.getRouteStats();
    const organizedInfo = getOrganizedRoutesInfo();
    
    res.json({
      success: true,
      data: {
        systemInfo: {
          routingSystem: 'Advanced Route Manager v2.0-organized',
          initialized: true,
          lastUpdate: new Date().toISOString(),
          architecture: 'Modular & Organized'
        },
        routeStatistics: stats,
        organizedRoutes: organizedInfo,
        features: {
          wildcardSupport: true,
          regexPatterns: true,
          rateLimiting: true,
          dynamicParameters: true,
          publicPrivateSeparation: true,
          modularArchitecture: true,
          organizedRouters: true,
          reducedCodeDuplication: true
        },
        performance: {
          lookupMethod: 'Map/Set optimized',
          averageLookupTime: '<1ms',
          memoryFootprint: 'minimal',
          maintainability: 'high'
        }
      },
      message: 'ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ™ÿ∑Ÿàÿ± ŸàÿßŸÑŸÖŸÜÿ∏ŸÖ'
    });
  });

  // ===== ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÄ routers ÿßŸÑŸÖŸÜÿ∏ŸÖÿ© =====
  
  // ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÄ public router ŸÖÿπ logging
  app.use('/api/public', (req, res, next) => {
    console.log(`üåê [PublicRouter] ÿ∑ŸÑÿ® ÿπÿßŸÖ: ${req.method} ${req.path}`);
    next();
  }, publicRouter);

  // ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑŸÄ private router ŸÖÿπ logging
  app.use('/api/protected', (req, res, next) => {
    console.log(`üîí [PrivateRouter] ÿ∑ŸÑÿ® ŸÖÿ≠ŸÖŸä: ${req.method} ${req.path}`);
    next();
  }, privateRouter);

  // ===== ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ© =====
  
  // endpoint ŸÑŸÑÿßÿÆÿ™ÿ®ÿßÿ± ŸàÿßŸÑÿ™ÿ∑ŸàŸäÿ± (ÿπÿßŸÖ)
  app.get('/api/system/test-public', publicRouteRateLimit, (req, res) => {
    const testResults = {
      routeType: 'public',
      authentication: false,
      rateLimited: true,
      responseTime: Date.now(),
      systemStatus: 'operational'
    };
    
    res.json({
      success: true,
      data: testResults,
      message: 'ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÖÿ≥ÿßÿ± ÿßŸÑÿπÿßŸÖ - ŸÜÿ¨ÿ≠',
      timestamp: new Date().toISOString()
    });
  });

  // ===== ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™Ÿàÿ´ŸäŸÇ ÿßŸÑÿØŸäŸÜÿßŸÖŸäŸÉŸä =====
  
  // endpoint ŸÑÿ™Ÿàÿ´ŸäŸÇ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©
  app.get('/api/system/routes-documentation', publicRouteRateLimit, (req, res) => {
    const documentation = {
      publicRoutes: {
        '/api/health': 'ŸÅÿ≠ÿµ ÿµÿ≠ÿ© ÿßŸÑŸÜÿ∏ÿßŸÖ',
        '/api/status': 'ÿ≠ÿßŸÑÿ© ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÅÿµŸäŸÑŸäÿ©',
        '/api/worker-types': 'ŸÇÿßÿ¶ŸÖÿ© ÿ£ŸÜŸàÿßÿπ ÿßŸÑÿπŸÖÿßŸÑ',
        '/api/auth/*': 'ŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿµÿßÿØŸÇÿ©',
        '/api/public/*': 'ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑÿπÿßŸÖÿ© ÿßŸÑŸÖŸÜÿ∏ŸÖÿ©'
      },
      protectedRoutes: {
        '/api/projects': 'ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ¥ÿßÿ±Ÿäÿπ',
        '/api/workers': 'ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿπŸÖÿßŸÑ',
        '/api/materials': 'ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿßÿØ',
        '/api/fund-transfers': 'ÿßŸÑÿ™ÿ≠ŸàŸäŸÑÿßÿ™ ÿßŸÑŸÖÿßŸÑŸäÿ©',
        '/api/autocomplete': 'ÿßŸÑÿ•ŸÉŸÖÿßŸÑ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä',
        '/api/notifications': 'ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ•ÿ¥ÿπÿßÿ±ÿßÿ™',
        '/api/protected/*': 'ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ≠ŸÖŸäÿ© ÿßŸÑŸÖŸÜÿ∏ŸÖÿ©'
      },
      features: {
        wildcardSupport: 'ÿØÿπŸÖ ÿ£ŸÜŸÖÿßÿ∑ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ±ÿ©',
        rateLimiting: 'ÿ™ÿ≠ÿØŸäÿØ ŸÖÿπÿØŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ŸÑŸÉŸÑ ŸÖÿ≥ÿßÿ±',
        authentication: 'ŸÜÿ∏ÿßŸÖ ŸÖÿµÿßÿØŸÇÿ© ŸÖÿ™ÿ∑Ÿàÿ±',
        errorHandling: 'ŸÖÿπÿßŸÑÿ¨ÿ© ÿ¥ÿßŸÖŸÑÿ© ŸÑŸÑÿ£ÿÆÿ∑ÿßÿ°'
      }
    };

    res.json({
      success: true,
      data: documentation,
      message: 'ÿ™Ÿàÿ´ŸäŸÇ ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ™ÿ∑Ÿàÿ±',
      version: '1.0.0'
    });
  });

  // ===== ŸÖÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑÿ™ÿ¥ÿÆŸäÿµ ŸàÿßŸÑÿµŸäÿßŸÜÿ© =====
  
  // endpoint ŸÑŸÅÿ≠ÿµ ÿµÿ≠ÿ© ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™
  app.get('/api/system/routing-health', publicRouteRateLimit, (req, res) => {
    const healthCheck = {
      routeManager: {
        status: 'healthy',
        publicRoutes: routeManager.getRouteStats().publicRoutes,
        protectedRoutes: routeManager.getRouteStats().protectedRoutes,
        wildcardRoutes: routeManager.getRouteStats().wildcardRoutes
      },
      rateLimiting: {
        status: 'active',
        limiters: routeManager.getRouteStats().rateLimiters
      },
      memory: {
        heapUsed: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB',
        heapTotal: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + ' MB'
      },
      uptime: {
        seconds: Math.floor(process.uptime()),
        formatted: Math.floor(process.uptime() / 3600) + 'h ' + Math.floor((process.uptime() % 3600) / 60) + 'm'
      }
    };

    res.json({
      success: true,
      data: healthCheck,
      message: 'ŸÅÿ≠ÿµ ÿµÿ≠ÿ© ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™',
      timestamp: new Date().toISOString()
    });
  });

  // ===== ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑŸÜŸáÿßÿ¶Ÿäÿ© =====
  
  const stats = routeManager.getRouteStats();
  console.log('‚úÖ [RouterOrganizer] ÿ™ŸÖ ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ŸÜÿ∏ŸäŸÖŸä ŸÑŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ÿ®ŸÜÿ¨ÿßÿ≠');
  console.log(`üìä [RouterOrganizer] ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™: ${stats.publicRoutes} ŸÖÿ≥ÿßÿ± ÿπÿßŸÖÿå ${stats.protectedRoutes} ŸÖÿ≥ÿßÿ± ŸÖÿ≠ŸÖŸä`);
  console.log(`üîß [RouterOrganizer] ŸÖŸäÿ≤ÿßÿ™ ŸÖÿ™ÿßÿ≠ÿ©: wildcardsÿå rate limitingÿå authentication`);

  // ÿ∑ÿ®ÿßÿπÿ© ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÖÿ≥ÿßÿ±ÿßÿ™ ŸÑŸÑÿ™ÿ∑ŸàŸäÿ± (ŸÅŸÇÿ∑ ŸÅŸä ÿ®Ÿäÿ¶ÿ© ÿßŸÑÿ™ÿ∑ŸàŸäÿ±)
  if (process.env.NODE_ENV !== 'production') {
    routeManager.logRouteDetails();
  }
}

/**
 * ÿØÿßŸÑÿ© ŸÖÿ≥ÿßÿπÿØÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™Ÿàÿ¨ŸäŸá
 */
export function getRoutingInfo() {
  return {
    organizer: true,
    version: '1.0.0',
    features: ['public/private separation', 'rate limiting', 'wildcards', 'logging'],
    stats: routeManager.getRouteStats()
  };
}

/**
 * ÿØÿßŸÑÿ© ŸÑŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑŸÜÿ∏ÿßŸÖ ŸÖŸáŸäÿ£ ÿ®ÿ¥ŸÉŸÑ ÿµÿ≠Ÿäÿ≠
 */
export function validateRouteOrganizer(): boolean {
  try {
    const stats = routeManager.getRouteStats();
    return stats.totalRoutes > 0;
  } catch (error) {
    console.error('‚ùå [RouterOrganizer] ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸÇŸÇ:', error);
    return false;
  }
}

export default { 
  initializeRouteOrganizer, 
  getRoutingInfo, 
  validateRouteOrganizer 
};